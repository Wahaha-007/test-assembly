Date : 16 Sep 24
Purpose : Test using Web Assembly
Finally : Use Image model like open CV and YOLO in ReactNative.

I am planning for computer vision in mobile using ReactNative. 
Some interaction with Python server (run on GUnicorn) is also expected. The task is about human face detection or hand and finger shape recognition. 
I will not train or make any model, ready made model is preferred. 
I normally use Expo to develop ReactNative for android.
I would like to stick to Expo with no ejection (for simplicity).
Any suggestion ?


----> Answer
1. TensorFlow.js (Web-based)
2. Expo + WebAssembly (WASM-based ML models)
3. External Cloud-Based APIs (No Ejection Needed)
4. Expo Camera + External Web API



If we finally want to have ReactNative Apps (Expo + Web Assembly) that can do some image recognition task like hand and finger shape. We will plan to first build simple Apps and gradually add elements to it. This is the great way to get familiar with Expo and Web Assembly and also the great way to debug.

Phase 1: Initial Setup and Familiarization
Phase 2: Introducing WebView and TensorFlow.js
Phase 3: Adding WebAssembly (WASM)
Phase 4: Performance Optimization and Features


-------------------------------------------------------------
Step 0 : Prepare working directory

--- Create git repo : test-assembly
--- Create app and and point to git
$ npx create-expo-app --template blank test-assembly
$ git remote add origin git@github.com:Wahaha-007/test-assembly.git
$ git branch -M main
$ git push --set-upstream origin main

-- Add SecretNote.txt into .gitignore

-- Install related libraries
$ npm install expo-camera






--------------------------------------------------------------
Step 1 : Tell ChatGPT the raw code based on Expo official website :
https://docs.expo.dev/versions/latest/sdk/camera/

Note : There may be error with VS Code mark red on file explorer, but no effect on our program
 "React-Native File 'expo-module-scripsts/tsconfig.base' not found"

Solution > Just hit Ctrl + Shift + P and run Typescript: Restart TS Server


Refer to the code : App end Phase 1.js
ตอนนี้ก็จะใช้กล้อง กลับ หน้าหลังไปมา และ ถ่ายรูป + ดู preview ได้แล้ว

----------------------------------------------------------------


Step 2 : WebView + TensorFlow.js

$ npm install react-native-webview
$ npm install @tensorflow/tfjs
$ npm install @tensorflow/tfjs-backend-wasm
(TensorFlow.js WebAssembly backend, which gives better performance compared to the default WebGL backend.)

ลอง Install แบบที่เหมาะกับ Expo มากขึ้น
$ npx expo install react-native-webview
$ npx expo install @tensorflow/tfjs
$ npx expo install @tensorflow/tfjs-backend-wasm
$ npx expo install expo-permissions

npx expo install -- --legacy-peer-deps expo-gl expo-gl-cpp expo-image-manipulator expo-file-system base64-arraybuffer


Steps for Phase 2:
2.1 Set up the WebView for TensorFlow.js.
2.2 Load TensorFlow.js inside WebView.
2.3 Run a pre-trained hand detection model in TensorFlow.js.

